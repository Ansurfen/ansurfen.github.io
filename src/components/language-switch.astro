---
import { ChevronDown, Languages } from "lucide-react";
import { cn, buttonVariants } from "@/lib/utils";
import { languages, getLocale } from "@/lib/i18n";

const currentLocale = getLocale(Astro.url);
---

<div class="group relative inline-block">
  <button
    id="language-toggle"
    class={cn(
      buttonVariants({ variant: "ghost" }),
      "flex h-8 w-[55px] items-center gap-0.5 px-1 cursor-pointer"
    )}
    aria-label="Language selector"
    onclick="toggleLanguageMenu()"
  >
    <Languages className="h-[1.2rem] w-[1.2rem]" />
    <ChevronDown
      id="chevron-icon"
      className="h-3.5 w-3.5 transition-transform duration-200 group-hover:rotate-180"
    />
    <span class="sr-only">Select language</span>
  </button>

  <div
    id="language-menu"
    class="invisible absolute right-0 z-50 mt-1 w-24 rounded-md border bg-background opacity-0 shadow-lg transition-all duration-200 group-hover:visible group-hover:opacity-100"
  >
    <ul class="py-1">
      {
        Object.entries(languages).map(([locale, langInfo]) => (
          <li>
            <button
              class="flex w-full cursor-pointer items-center gap-2 px-2.5 py-1.5 text-left text-sm font-normal text-foreground/80 hover:bg-accent/30 data-[selected=true]:font-semibold data-[selected=true]:text-foreground"
              onclick={`setLanguage('${locale}', this)`}
              data-selected={currentLocale === locale}
            >
              <span class="opacity-85">{langInfo.name}</span>
            </button>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<script is:inline>
  const localePaths = ['/en_us', '/zh_cn', '/zh_tw', '/ja_jp', '/ru', '/es_es', '/pt_pt', '/fr_fr', '/ar_sa'];
  const nonEnglishPaths = localePaths.filter(path => path !== '/en_us');

  // 检测是否为移动设备
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

  // 切换语言菜单显示/隐藏
  function toggleLanguageMenu() {
    // 只在移动设备上处理点击事件
    if (!isMobile) return;

    const menu = document.getElementById('language-menu');
    const chevron = document.getElementById('chevron-icon');
    const isVisible = menu.classList.contains('visible');
    
    if (isVisible) {
      menu.classList.remove('visible', 'opacity-100');
      menu.classList.add('invisible', 'opacity-0');
      chevron.style.transform = 'rotate(0deg)';
    } else {
      menu.classList.remove('invisible', 'opacity-0');
      menu.classList.add('visible', 'opacity-100');
      chevron.style.transform = 'rotate(180deg)';
    }
  }

  // 点击页面其他地方关闭菜单（仅在移动设备上）
  if (isMobile) {
    document.addEventListener('click', (event) => {
      const menu = document.getElementById('language-menu');
      const toggle = document.getElementById('language-toggle');
      
      if (!toggle.contains(event.target) && !menu.contains(event.target)) {
        menu.classList.remove('visible', 'opacity-100');
        menu.classList.add('invisible', 'opacity-0');
        document.getElementById('chevron-icon').style.transform = 'rotate(0deg)';
      }
    });
  }

  // 切换语言时移除所有语言前缀
  const setLanguage = (locale, clickedButton) => {
    localStorage.setItem("language", locale);

    // 获取当前路径并移除任何语言前缀
    let currentPath = window.location.pathname;

    // 移除语言前缀
    for (const path of localePaths) {
      if (currentPath.startsWith(path)) {
        currentPath = currentPath.slice(path.length);
        break;
      }
    }

    // 英语(en_us)时直接跳转到无前缀路径，其他语言保持前缀
    const newPath =
      locale === "en_us" ? `${currentPath || "/"}` : `/${locale}${currentPath}`;

    window.location.href = newPath;
  };

  // 高亮当前语言
  document.addEventListener("astro:page-load", () => {
    const currentPath = window.location.pathname;
    const buttons = document.querySelectorAll('[onclick^="setLanguage"]');

    buttons.forEach(button => {
      const match = button.getAttribute("onclick")?.match(/'([^']+)'/);
      if (!match) return;

      const langCode = match[1];
      const langPath = `/${langCode}`;

      // 英语特殊处理：无前缀路径或/en_us路径都算选中
      const isSelected =
        langCode === "en_us"
          ? !nonEnglishPaths.some(path => currentPath.startsWith(path))
          : currentPath.startsWith(langPath);

      button.setAttribute("data-selected", isSelected ? "true" : "false");
    });
  });
</script>
